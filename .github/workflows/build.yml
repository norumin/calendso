name: Build app docker image and push

on:
  push:
    branches:
      - production
    paths:
      - '.github/workflows/build.yml'
      - 'docker/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-2
  APP: calendso
  STAGE: ${{ github.ref_name }}
  SHA: ${{ github.sha }}

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          mask-aws-account-id: false
      - name: Login to ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.4
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -no-color
      - name: Select terraform workspace
        id: select-workspace
        run: terraform workspace select ${{ env.STAGE }}
      - name: Terraform output
        id: output
        run: terraform output -json -no-color > output.json
      - name: Prepare build args list
        id: build-args
        run: |
          jq ".app_image_build_args.value" -Mr output.json | jq 'keys[] as $k | "\($k)=\(.[$k])"' -Mr > build_args.env
          echo ::set-output name=NODE_ENV::$(jq ".app_image_build_args.value.NODE_ENV" -Mr output.json)
          echo ::set-output name=NEXT_PUBLIC_WEBAPP_URL::$(jq ".app_image_build_args.value.NEXT_PUBLIC_WEBAPP_URL" -Mr output.json)
          echo ::set-output name=NEXT_PUBLIC_APP_URL::$(jq ".app_image_build_args.value.NEXT_PUBLIC_APP_URL" -Mr output.json)
          echo ::set-output name=NEXT_PUBLIC_LICENSE_CONSENT::$(jq ".app_image_build_args.value.NEXT_PUBLIC_LICENSE_CONSENT" -Mr output.json)
          echo ::set-output name=CALCOM_TELEMETRY_DISABLED::$(jq ".app_image_build_args.value.CALCOM_TELEMETRY_DISABLED" -Mr output.json)
          echo ::set-output name=DATABASE_URL::$(jq ".app_image_build_args.value.DATABASE_URL" -Mr output.json)
          echo ::set-output name=NEXTAUTH_SECRET::$(jq ".app_image_build_args.value.NEXTAUTH_SECRET" -Mr output.json)
          echo ::set-output name=CALENDSO_ENCRYPTION_KEY::$(jq ".app_image_build_args.value.CALENDSO_ENCRYPTION_KEY" -Mr output.json)
      - name: Get version tag of webapp
        id: webapp-version
        run: echo ::set-output name=version::$(jq ".version" -Mr docker/calcom/apps/web/package.json)
      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: docker/.
          build-args: |
            NODE_ENV=${{ steps.build-args.outputs.NODE_ENV }}
            NEXT_PUBLIC_WEBAPP_URL=${{ steps.build-args.outputs.NEXT_PUBLIC_WEBAPP_URL }}
            NEXT_PUBLIC_APP_URL=${{ steps.build-args.outputs.NEXT_PUBLIC_APP_URL }}
            NEXT_PUBLIC_LICENSE_CONSENT=${{ steps.build-args.outputs.NEXT_PUBLIC_LICENSE_CONSENT }}
            CALCOM_TELEMETRY_DISABLED=${{ steps.build-args.outputs.CALCOM_TELEMETRY_DISABLED }}
            DATABASE_URL=${{ steps.build-args.outputs.DATABASE_URL }}
            NEXTAUTH_SECRET=${{ steps.build-args.outputs.NEXTAUTH_SECRET }}
            CALENDSO_ENCRYPTION_KEY=${{ steps.build-args.outputs.CALENDSO_ENCRYPTION_KEY }}
          tags: |
            ghcr.io/norumin/calendso:${{ env.SHA }}
            ghcr.io/norumin/calendso:${{ env.STAGE }}
            ghcr.io/norumin/calendso:${{ steps.webapp-version.outputs.version }}
            ghcr.io/norumin/calendso:latest
          push: true
